#!/usr/bin/env python3

# ------------------------------------------------------------------------
# Copyright 2021, 2022 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

""" Get SAP system memory consumption information """


try:
    # Global modules

    import logging
    import math
    import time

    # Local modules

    from modules.args       import (
        addCommonArgsString,
        getCommonArgsParser,
        addArgAppName,
        addArgLoop,
        addArgSleepTime
    )
    from modules.context    import getContext
    from modules.ocp        import Ocp
    from modules.deployment import Deployments
    from modules.quantity   import Quantity
    from modules.startup    import startup
    from modules.tools      import getTimestamp
    from modules.fail       import fail

except ModuleNotFoundError as mnfex:
    from modules.exceptions import setExceptHook
    setExceptHook()
    raise mnfex


# Functions

def _getArgs():
    """ Get command line arguments """
    parser = getCommonArgsParser(
        'Get SAP system memory consumption information'
    )

    addArgAppName(parser)
    addArgLoop(parser)
    addArgSleepTime(parser)

    return parser.parse_args()


def _getMeminfoGiB(ocp, instance):
    # Returns a float, may return math.nan

    containerName = ocp.getContainerName(instance)
    meminfoCmd    = "cat /sys/fs/cgroup/memory/memory.usage_in_bytes"

    res = ocp.containerRun(containerName, meminfoCmd)

    if res.rc != 0:
        logging.debug(f"Execution of command '{meminfoCmd}' in container '{containerName}'"
                      f" returned rc {res.rc} (reason: {res.err})")

    try:
        memUsage = float(res.out.strip())/(1024**3)
    except ValueError:
        memUsage = math.nan

    return memUsage


def _getLimitGiB(ctx, instance):
    # Returns an int

    limit = getattr(ctx.cf.ocp.containers, instance).resources.limits.memory

    # Scale the limit value to GiB

    return Quantity(limit).valueIntScaled("Gi")


def _printResult(instance, memUsage, limit, percentage):
    # memUsage and percentage might be math.nan, if  a problem occurred
    # during containerRun() in function _getMeminfoGiB()

    limitStr      = f'{limit:4.1f}'
    memUsageStr   = f'{memUsage:6.3f}'   if not math.isnan(memUsage)   else '     ?'
    percentageStr = f'{percentage:4.2f}' if not math.isnan(percentage) else '    ?'
    print(f'{instance.upper():10} {memUsageStr:7} {limitStr:5} {percentageStr}')


# ----------------------------------------------------------------------

def _main():

    ctx = getContext(_getArgs())

    addCommonArgsString(ctx)

    instances = ctx.config.getContainerFlavors()
    instances.remove('init')

    ocp = Ocp(ctx)

    deployments = Deployments(ctx, ocp, deploymentType = ctx.cs.deployRunning)

    appNames = None
    if not ctx.ar.app_name:
        appNames = deployments.getAppNames()
    else:
        appName = deployments.getValidAppName()
        appNames = [appName]

    if len(appNames) == 0:
        fail("No running deployments found.")

    while True:
        if ctx.ar.loop:
            print(getTimestamp(withDecorator=True))

        print('             Used Limit   Used')
        print('Instance      GiB   GiB      %')
        print('='*30)

        first = True

        for appName in appNames:
            ocp.setAppName(appName)

            if not first:
                print('-'*len('Deployment ' + appName))
            first = False
            print(f'App-Name   {appName}')
            print('-'*len('Deployment ' + appName))

            for instance in instances:
                memUsage = _getMeminfoGiB(ocp, instance)
                limit    = _getLimitGiB(ctx, instance)
                _printResult(instance, memUsage, limit, memUsage * 100 / limit)

        if ctx.ar.loop:
            time.sleep(ctx.ar.sleep_time)
        else:
            break

    del ocp

# ----------------------------------------------------------------------


if __name__ == '__main__':
    startup(_main)
