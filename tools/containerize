#!/usr/bin/env python3

# ------------------------------------------------------------------------
# Copyright 2020, 2022 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

""" Automated build, push and deploy """


try:
    # Global modules

    # None

    # Local modules

    from modules.args     import (
        addCommonArgsString,
        getCommonArgsParser,
        addArgOverlayUuid,
        addArgDeploymentFile
    )

    from modules.containerize import (
        copyHdb,
        buildImages,
        pushImages,
        setupOverlayShare,
        createDeploymentFile,
        startDeployment,
        listOverlayShares,
        tearDownOverlayShare,
        stopDeployment
    )

    from modules.context  import getContext
    from modules.startup  import startup
    from modules.times    import saveCurrentTime

except ModuleNotFoundError as mnfex:
    from modules.exceptions import setExceptHook
    setExceptHook()
    raise mnfex


# Functions

def _getArgs():
    """ Get command line arguments """
    parser = getCommonArgsParser(
        'Automated build, push and deploy'
    )

    parser.add_argument(
        '-y',
        '--hdb-copy',
        required = False,
        action   = 'store_true',
        help     = "Copy HANA DB snapshot to NFS server"
    )

    parser.add_argument(
        '-b',
        '--build-images',
        required = False,
        action   = 'store_true',
        help     = "Build images"
    )

    parser.add_argument(
        '-p',
        '--push-images',
        required = False,
        action   = 'store_true',
        help     = "Push images to local OCP cluster registry"
    )

    parser.add_argument(
        '-o',
        '--setup-overlay-share',
        required = False,
        action   = 'store_true',
        help     = "Setup overlay share"
    )

    addArgOverlayUuid(
        parser,
        required=False,
        helpText="UUID of overlay share for options '-d' and '-t'"
    )

    parser.add_argument(
        '-l',
        '--list-overlay-shares',
        required = False,
        action   = 'store_true',
        help     = "List existing overlay shares"
    )

    parser.add_argument(
        '-t',
        '--tear-down-overlay-share',
        required = False,
        action   = 'store_true',
        help     = "Tear down overlay share specified with option '-u'"
    )

    parser.add_argument(
        '-d',
        '--create-deployment-file',
        required = False,
        action   = 'store_true',
        help     = "Create deployment file"
    )

    addArgDeploymentFile(
        parser,
        required=False,
        helpText="Deployment filename for options '-s' and '-x'"
    )

    parser.add_argument(
        '-s',
        '--start-deployment',
        required = False,
        action   = 'store_true',
        help     = "Start deployment specified with option -f on OCP cluster"
    )

    parser.add_argument(
        '-x',
        '--stop-deployment',
        required = False,
        action   = 'store_true',
        help     = "Stop deployment specified with option -f on OCP cluster"
    )

    parser.add_argument(
        '-a',
        '--execute-all',
        required = False,
        action   = 'store_true',
        help     = "Execute all actions (except '-t', '-l' and '-x')"
    )

    parser.add_argument(
        '-r',
        '--execute-rest',
        required = False,
        action   = 'store_true',
        help     = "Start with specified action "
                   "and execute all subsequent actions in automation process."
    )

    return parser.parse_args()


# ----------------------------------------------------------------------

def _main():
    # pylint: disable=too-many-statements, too-many-branches

    ctx = getContext(_getArgs())

    addCommonArgsString(ctx)

    overlayUuid    = None
    deploymentFile = None

    # ↓↓↓ AUTOMATION OPTIONS ↓↓↓

    # Copy snapshot of HANA

    if ctx.ar.execute_all or ctx.ar.hdb_copy:
        ctx.ar.execute_all = ctx.ar.execute_all or ctx.ar.execute_rest
        saveCurrentTime('Copy HDB Start')
        copyHdb(ctx)
        saveCurrentTime('Copy HDB End')

    # Build images

    if ctx.ar.execute_all or ctx.ar.build_images:
        ctx.ar.execute_all = ctx.ar.execute_all or ctx.ar.execute_rest
        saveCurrentTime('Build Images Start')
        buildImages(ctx)
        saveCurrentTime('Build Images End')

    # Push images

    if ctx.ar.execute_all or ctx.ar.push_images:
        ctx.ar.execute_all = ctx.ar.execute_all or ctx.ar.execute_rest
        saveCurrentTime('Push Images Start')
        pushImages(ctx)
        saveCurrentTime('Push Images End')

    # Setup overlay share

    if ctx.ar.execute_all or ctx.ar.setup_overlay_share:
        ctx.ar.execute_all = ctx.ar.execute_all or ctx.ar.execute_rest
        saveCurrentTime('Setup Overlay Share Start')
        overlayUuid = setupOverlayShare(ctx)
        saveCurrentTime('Setup Overlay Share End')

    # Create deployment YAML file

    if ctx.ar.execute_all or ctx.ar.create_deployment_file:
        ctx.ar.execute_all = ctx.ar.execute_all or ctx.ar.execute_rest
        if not overlayUuid:
            overlayUuid = ctx.ar.overlay_uuid
        saveCurrentTime('Create Deployment File Start')
        deploymentFile = createDeploymentFile(ctx, overlayUuid)
        saveCurrentTime('Create Deployment File End')

    # Start deployment

    if ctx.ar.execute_all or ctx.ar.start_deployment:
        ctx.ar.execute_all = ctx.ar.execute_all or ctx.ar.execute_rest
        saveCurrentTime('Start Deployment Start')
        if not deploymentFile:
            deploymentFile = ctx.ar.deployment_file
        startDeployment(ctx, deploymentFile=deploymentFile)
        saveCurrentTime('Start Deployment End')

    # ↑↑↑ AUTOMATION OPTIONS ↑↑↑

    # ↓↓↓ MANUAL OPTIONS ↓↓↓

    # List existing overlay shares

    if ctx.ar.list_overlay_shares:
        saveCurrentTime('List Overlay Shares Start')
        print(listOverlayShares(ctx))
        saveCurrentTime('List Overlay Shares End')

    # Tear down overlay share

    if ctx.ar.tear_down_overlay_share:
        saveCurrentTime('Teardown Overlay Shares Start')
        if not overlayUuid:
            overlayUuid = ctx.ar.overlay_uuid
        tearDownOverlayShare(ctx, overlayUuid)
        saveCurrentTime('Teardown Overlay Shares End')

    # Stop deployment

    if ctx.ar.stop_deployment:
        saveCurrentTime('Stop Deployment Start')
        if not deploymentFile:
            deploymentFile = ctx.ar.deployment_file
        stopDeployment(ctx, deploymentFile=deploymentFile)
        saveCurrentTime('Stop Deployment End')

    # ↑↑↑ MANUAL OPTIONS ↑↑↑


# ----------------------------------------------------------------------

if __name__ == '__main__':
    startup(_main)
