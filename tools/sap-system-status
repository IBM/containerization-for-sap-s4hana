#!/usr/bin/env python3

# ------------------------------------------------------------------------
# Copyright 2021, 2022 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

""" Get SAP system status """


try:
    # Global modules

    import collections
    import logging
    import re
    import time
    import types

    # Local modules

    from modules.args       import (
        addCommonArgsString,
        getCommonArgsParser,
        addArgAppName,
        addArgLoop,
        addArgSleepTime
    )
    from modules.context    import getContext
    from modules.nestedns   import objToNestedNs
    from modules.ocp        import Ocp
    from modules.startup    import startup
    from modules.tools      import getTimestamp
    from modules.deployment import Deployments
    from modules.fail       import fail

except ModuleNotFoundError as mnfex:
    from modules.exceptions import setExceptHook
    setExceptHook()
    raise mnfex


# Functions

def _getArgs():
    """ Get command line arguments """
    parser = getCommonArgsParser(
        'Get SAP system status'
    )

    addArgAppName(parser)
    addArgLoop(parser)
    addArgSleepTime(parser)

    helpText  = "Print the process list for every container."
    helpText += "Ignored if --app-name not specified."

    parser.add_argument(
        '--process-list',
        required = False,
        action   = 'store_true',
        help     = helpText
    )

    return parser.parse_args()


def _getStatus(ocp, instance, sidadm, instno):
    # pylint: disable=too-many-locals

    class _LocalEx(Exception):
        pass

    try:
        containerName = ocp.getContainerName(instance)

        sapctrlCmd = f'sapcontrol -nr {instno} -function GetProcessList -format script'
        statusCmd  = f"su - {sidadm} -c '{sapctrlCmd}'"

        rcOk = (0, 3)  # Even if sapcontrol exits with rc==3 the result seems to be ok

        res = ocp.containerRun(containerName, statusCmd, rcOk=rcOk)

        if res.rc not in rcOk:
            raise _LocalEx(f"Execution of command '{statusCmd}"
                           f" in container '{containerName}' failed")

        lines = [line.strip() for line in res.out.split('\n')]

        # Output of 'sapcontrol -nr {instno} -function GetProcessList -format script'
        # looks as follows (without prefix '[xx] '; lines [04]-[10] are repeated for
        # each process where the index at the beginning of the line is incremented for
        # each new process):
        #
        # [01] 09.08.2021 11:36:32
        # [02] GetProcessList
        # [03] OK
        # [04] 0 name: disp+work
        # [05] 0 description: Dispatcher
        # [06] 0 dispstatus: GREEN
        # [07] 0 textstatus: Running
        # [08] 0 starttime: 2021 08 05 18:30:46
        # [09] 0 elapsedtime: 89:05:46
        # [10] 0 pid: 1623
        # ...

        if len(lines) < 3:
            raise _LocalEx(f"Execution of command '{statusCmd} delivered truncated output")

        funcStatus = lines[2]

        if funcStatus != 'OK':
            raise _LocalEx("'sapcontrol -function GetProcessList'"
                           f" failed with status '{funcStatus}'")

        status = collections.OrderedDict()

        for line in lines[3:]:
            match = re.match(r'(\d+)\s+([a-z]+):\s*(.*)?', line)
            if match:
                i = int(match.group(1))
                if i not in status.keys():
                    status[i] = {}
                status[i][match.group(2)] = match.group(3)
            else:
                logging.warning(f"Found unexpected line '{line}'")

        status = [types.SimpleNamespace(**v) for (k, v) in status.items()]

    except _LocalEx as ex:
        status = []
        msg = f"Could not get status for instance '{instance}'"
        logging.debug(f'{msg} (reason: {ex})')
        # print(msg)

    logging.debug(f'status >>>{status}<<<')

    result = types.SimpleNamespace()
    result.status = status
    result.rc     = res.rc
    return result


def _printStatus(ctx, status, instance):
    if ctx.ar.process_list:
        print('='*40 + f' {instance.upper():4} ' + '='*40)
        _printProcesslist(status)

    else:
        _printContainerStatus(instance, status)


def _printProcesslist(status):

    if not status:
        print('Could not get status')
        return

    cols = objToNestedNs([
        {
            'key':   'name',
            'label': 'Name',
            'width':  '20.20'
        }, {
            'key':   'description',
            'label': 'Description',
            'width':  '20.20'
        }, {
            'key':   'textstatus',
            'label': 'Status',
            'width':  '12.12'
        }, {
            'key':   'starttime',
            'label': 'Started',
            'width':  '20.20'
        }, {
            'key':   'elapsedtime',
            'label': 'Elapsed',
            'width':  '20.20'
        }
    ])

    # pylint: disable=no-member

    print(' '.join([f'{col.label:{col.width}}' for col in cols]))

    for proc in status:
        _enhanceProcessStatus(proc)
        print(' '.join([f'{getattr(proc, col.key):{col.width}}' for col in cols]))


def _enhanceProcessStatus(proc):
    if proc.starttime == '':
        proc.starttime = 'n/a'
    else:
        # Format date (2021 07 21 => 2021-07-21)
        proc.starttime = proc.starttime.replace(' ', '-', 2)

    if proc.elapsedtime == '':
        proc.elapsedtime = 'n/a'


def _printContainerStatus(instance, status):
    instance = instance.upper()

    if not status:
        print(_getContainerStatusLine(instance, 'unknown'))

    elif all(proc.textstatus == "Running" for proc in status):
        print(_getContainerStatusLine(instance, 'running'))

    else:
        print(_getContainerStatusLine(instance, 'not all processes running'))


def _getContainerStatusLine(instance, status):
    return f'{instance:{len("Instance:")}}  {status}'


def _printHeader():
    print(_getContainerStatusLine('Instance',  'Status'))
    print('='*len(_getContainerStatusLine('', 'not all processes running')))


def _printAppName(appName, first, processList):
    if not processList and not first:
        print('-'*len(_getContainerStatusLine('', 'not all processes running')))
    print(f'App-Name:  {appName}')
    if not processList:
        print('-'*len(_getContainerStatusLine('', 'not all processes running')))


def _getReturnCode(retCodeList):
    # Return code retCode set as follows:
    # retCode =  0: all sapcontrol calls return ok (rc=0 or rc=3)
    # retCode =  1: at least one (not all) sapcontrol call returns 1
    # retCode =  2: at least one (not all) sapcontrol call returns 2
    # retCode =  4: at least one (not all) sapcontrol call returns 4
    # retCode =  8: all sapcontrol calls return 2
    # retCode = 16: all sapcontrol calls return 4

    noOfContainers = len(retCodeList)

    if retCodeList.count(0) + retCodeList.count(3) == noOfContainers:
        # all instances are running
        return 0
    if retCodeList.count(4) == noOfContainers:
        # all instances are stopped
        return 16
    if retCodeList.count(2) == noOfContainers:
        # all instances are in wait state
        return 8
    return max(retCodeList)

# ----------------------------------------------------------------------


def _main():

    ctx = getContext(_getArgs())

    addCommonArgsString(ctx)

    instances = ctx.config.getContainerFlavors()
    instances.remove('init')

    ocp = Ocp(ctx)
    deployments = Deployments(ctx, ocp, deploymentType = ctx.cs.deployRunning)

    appNames = None
    if not ctx.ar.app_name:
        appNames = deployments.getAppNames()
        ctx.ar.process_list = None
    else:
        appName = deployments.getValidAppName()
        appNames = [appName]

    if len(appNames) == 0:
        fail("No running deployments found.")

    while True:
        retCodeList = []

        if ctx.ar.loop:
            print(getTimestamp(withDecorator=True))

        if not ctx.ar.process_list:
            _printHeader()

        first = True

        for appName in appNames:
            _printAppName(appName, first, ctx.ar.process_list)
            first = False

            for instance in instances:

                if instance in ('ascs', 'di'):
                    sidadm = ctx.cr.refsys.nws4.sidadm.name
                    instno = getattr(ctx.cf.refsys.nws4, instance).instno

                elif instance == 'hdb':
                    sidadm = ctx.cr.refsys.hdb.sidadm.name
                    instno = ctx.cf.refsys.hdb.instno

                ocp.setAppName(appName)

                result = _getStatus(ocp, instance, sidadm, instno)
                _printStatus(ctx, result.status, instance)
                retCodeList.append(result.rc)

        if ctx.ar.loop:
            time.sleep(ctx.ar.sleep_time)
        else:
            break

    del ocp

    return _getReturnCode(retCodeList)


# ----------------------------------------------------------------------

if __name__ == '__main__':
    startup(_main)
