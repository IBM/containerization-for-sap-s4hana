#!/usr/bin/env python3

# ------------------------------------------------------------------------
# Copyright 2020, 2022 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

""" Generate OpenShift HANA secret YAML file """


try:
    # Global modules

    # None

    # Local modules

    from modules.args    import getCommonArgs
    from modules.command import CmdShell
    from modules.context import getContext
    from modules.fail    import fail
    from modules.ocp     import Ocp
    from modules.startup import startup
    from modules.tools   import genFileFromTemplate

except ModuleNotFoundError as mnfex:
    from modules.exceptions import setExceptHook
    setExceptHook()
    raise mnfex


# Functions


# ----------------------------------------------------------------------

def _main():

    ctx = getContext(getCommonArgs(
        'Generate OpenShift HANA secret YAML file'
    ))

    secretName = ctx.cf.ocp.containers.di.secret

    if not secretName:
        fail(f"Secret name is not specified in file '{ctx.ar.config_file}'"
             f" - not generating secret")

    templateDir  = f'{ctx.cf.build.repo.root}/openshift'
    templateFile = f'{templateDir}/secret.yaml.template'
    secretFile   = f'{templateDir}/{secretName}.yaml'

    params = {
        'secret-name': secretName,
        'project':     ctx.cf.ocp.project,
        'User':        ctx.cr.refsys.nws4.hdbconnect.name,
        'Password':    ctx.cr.refsys.nws4.hdbconnect.password
    }

    genFileFromTemplate(templateFile, secretFile, params)

    ocp = Ocp(ctx)
    result = ocp.ocApply(secretFile)

    if result.rc > 0:
        fail(result.err)
    CmdShell().run(f'rm -f {secretFile}')
    print(f'Secret {secretName} created for project {ctx.cf.ocp.project}')

    del ocp


# ----------------------------------------------------------------------

if __name__ == '__main__':
    startup(_main)
