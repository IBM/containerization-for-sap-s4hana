#!/usr/bin/env python3

# ------------------------------------------------------------------------
# Copyright 2020, 2022 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

""" Generate YAML file for service account creation """


try:
    # Global modules

    # None

    # Local modules

    from modules.args    import (
        addArgOutputFile,
        getCommonArgsParser
    )
    from modules.context import getContext
    from modules.fail    import fail
    from modules.ocp     import Ocp
    from modules.startup import startup
    from modules.command import CmdShell


except ModuleNotFoundError as mnfex:
    from modules.exceptions import setExceptHook
    setExceptHook()
    raise mnfex


# Functions

def _getArgs():
    """ Get command line arguments """
    parser = getCommonArgsParser(
        'Generate YAML file for service account creation'
    )

    addArgOutputFile(parser, None)

    return parser.parse_args()


# ----------------------------------------------------------------------

def _main():

    ctx = getContext(_getArgs())

    outputFile = ctx.ar.output_file
    if not outputFile:
        outputFile = ctx.cf.ocp.sa.file

    try:
        # pylint: disable=invalid-name, unspecified-encoding
        with open(outputFile, 'w') as fh:
            print(f'apiVersion: v1\n'
                  f'kind: ServiceAccount\n'
                  f'metadata:\n'
                  f'  name: {ctx.cf.ocp.sa.name}\n'
                  f'  namespace: {ctx.cf.ocp.project}',
                  file=fh
                  )
    except IOError:
        fail(f"Error writing to file {outputFile}")

    ocp = Ocp(ctx)
    result = ocp.ocApply(outputFile)
    del ocp

    CmdShell().run(f'rm -f {outputFile}')
    if result.rc > 0:
        fail(result.err)
    else:
        print(result.out)


# ----------------------------------------------------------------------

if __name__ == '__main__':
    startup(_main)
