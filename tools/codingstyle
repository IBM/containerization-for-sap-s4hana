#!/usr/bin/env python3

# ------------------------------------------------------------------------
# Copyright 2020, 2021 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

""" Check coding style of python files """


# Global modules

import html
import logging
import os
import sys
import types


# Local modules

from modules.args    import getCommonArgsParser
from modules.command import CmdShell
from modules.context import getContext
from modules.fail    import fail
from modules.tools   import getExecPath


# Constants

MAX_LINE_LENGTH = 100


# Classes

class _Autopep8:
    """ Execute autopep8 """
    autopep8Ignores = [
        'E226',  # default ignore
        'E24',   # default ignore
        'W50',   # default ignore
        'W690',  # default ignore
        'E124',  # don't fix 'closing bracket does not match visual indentation'
        'E221',  # don't fix whitespaces for named function parameters
        'E222',  # don't fix multiple spaces after operator
        'E251',  # don't fix whitespaces for named function parameters
        'E271',  # don't remove extraneous whitespace around keywords
        'E272',  # don't remove extraneous whitespace around keywords
    ]

    autopep8 = getExecPath('autopep8')
    logging.debug(f"Using '{autopep8}' for 'autopep8'")
    autopep8 += ' --verbose'
    # autopep8 += ' --in-place'
    autopep8 += f' --max-line-length {MAX_LINE_LENGTH+1}'
    autopep8 += ' --ignore ' + ','.join(autopep8Ignores)

    def __init__(self, ctx, file):
        self._ctx      = ctx
        self._file     = file
        self._fileAp8  = f'{file}.ap8'
        self._cmdShell = CmdShell()

    def run(self):
        """ Execute autopep8 on given file """
        return self._cmdShell.run(f'{_Autopep8.autopep8} {self._file} > {self._fileAp8}')

    def diff(self):
        """ Diff file against autopep8 output """

        res = self._cmdShell.run(f'diff {self._file} {self._fileAp8}')

        if res.rc != 0:
            # There were differences
            # Mark all line ends with a '$' to visualize trailing whitespaces
            res.out = res.out.replace('\n', '$\n')

        return res

    def remove(self):
        """ Remove temporary file created by autopep8 """
        os.remove(self._fileAp8)


class _Pylint:
    """ Execute pylint """
    pylintIgnores = [
        'no-self-use',
        'too-few-public-methods',
        'logging-fstring-interpolation'
    ]

    pylint = getExecPath('pylint')
    logging.debug(f"Using '{pylint}' for 'pylint'")
    pylint += f' --max-line-length={MAX_LINE_LENGTH}'
    pylint += ' --function-naming-style=camelCase'
    pylint += ' --argument-naming-style=camelCase'
    pylint += ' --variable-naming-style=camelCase'
    pylint += ' --method-naming-style=camelCase'
    pylint += ' --attr-naming-style=camelCase'
    pylint += " --module-rgx='(?:(?P<kebab>[a-z-]+))'"
    pylint += ' --disable=' + ','.join(pylintIgnores)

    cmdShell = CmdShell()

    @classmethod
    def run(cls, file):
        """ Execute pylint on given file """
        return cls.cmdShell.run(f'{cls.pylint} {file}')


class _Formatter():

    def __init__(self):
        pass

    def printMsg(self, msg):
        """ Print a message to stderr """
        print(msg, file=sys.stderr)

    def addFileHeader(self, path):
        """ Add header for one file """

    def addIssues(self, kind, issues):
        """ Add issues of a specific kind """

    def addFileFooter(self):
        """ Add footer for one file """

    def addStats(self, total, totalOk):
        """ Add statistcs line """

    def _getStatsMsg(self, total, totalOk):
        return f'{totalOk} / {total} file(s) passed all checks'


class _EmptyFormatter(_Formatter):

    def __str__(self):
        return ''

    def printMsg(self, msg):
        pass


class _TextFormatter(_Formatter):

    def __init__(self):
        super().__init__()
        self._text = ''

    def __str__(self):
        return f"\n{self._getStepHeader('Codingstyle Report', '#')}{self._text}"

    def addFileHeader(self, path):
        self._text += self._getStepHeader(f"File '{path}'", '=')

    def addIssues(self, kind, issues):
        self._text += self._getStepHeader(f'{kind} issues', '-')
        self._text += f'{issues}\n'

    def addFileFooter(self):
        pass

    def addStats(self, total, totalOk):
        self._text += f'\n{self._getStatsMsg(total, totalOk)}\n'

    def _getStepHeader(self, message, headChar):
        return str(f'{headChar*70}\n'
                   f'  {message}\n'
                   f'{headChar*70}\n')


class _HtmlFormatter(_Formatter):

    def __init__(self):
        super().__init__()
        self._html = ''

    def __str__(self):
        return self._getHeader() + self._html + self._getFooter()

    def addFileHeader(self, path):
        self._html +=  '    <details>\n'
        self._html += f'      <summary>{path}</summary>\n'
        self._html +=  '      <ul type="none">\n'

    def addIssues(self, kind, issues):
        self._html +=  '        <li>\n'
        self._html +=  '          <details>\n'
        self._html += f'            <summary>{kind} issues</summary>\n'
        self._html +=  '            <pre>\n'
        self._html += f'{html.escape(issues)}\n'
        self._html +=  '            </pre>\n'
        self._html +=  '          </details>\n'
        self._html +=  '        </li>\n'

    def addFileFooter(self):
        self._html +=  '      </ul>\n'
        self._html +=  '    </details>\n'

    def addStats(self, total, totalOk):
        self._html += f'    <p>{self._getStatsMsg(total, totalOk)}</p>\n'

    def _getHeader(self):
        return str('<!DOCTYPE html>\n'
                   '<html>\n'
                   '  <head>\n'
                   '    <meta charset="utf-8">\n'
                   '    <title>Codingstyle Report</title>\n'
                   '  </head>\n'
                   '  <body>\n'
                   '    <h1>Codingstyle Report</h1>\n')

    def _getFooter(self):
        return str('  </body>\n'
                   '</html>\n')


# Functions

def _getArgs():
    """ Get command line arguments """
    parser = getCommonArgsParser(
        'Check coding style of python files'
    )

    parser.add_argument(
        'source',
        metavar  = '<source>',
        nargs    = '+',
        help     = 'Names of files or directories that are to be checked'
    )

    parser.add_argument(
        '-r',
        '--recursion-level',
        type     = int,
        metavar  = '<recursion-level>',
        required = False,
        default  = 0,
        help     = "Perform recursive check up to depth <recursion-level> "
                   "if <source> is a directory; ('-1': no depth limitation)"
    )

    formats = [
        'text',  # first entry is default tool
        'html',
        'empty'
    ]

    parser.add_argument(
        '-f',
        '--format',
        metavar  = '<format>',
        required = False,
        choices  = formats,
        default  = formats[0],
        help     = "Select output format "
                   "('"+"', '".join(formats)+"')"
    )

    return parser.parse_args()


def _getFormatter(ctx):

    if ctx.ar.format == 'text':
        formatter = _TextFormatter()

    elif ctx.ar.format == 'html':
        formatter = _HtmlFormatter()

    elif ctx.ar.format == 'empty':
        formatter = _EmptyFormatter()

    else:
        # Should not be reached
        fail(f"Unexpected format '{ctx.ar.format}'")

    return formatter


def _ignoreFile(file):

    ignoreFile = False
    ignoreFile = ignoreFile or file.endswith('~')
    ignoreFile = ignoreFile or file.endswith('#')
    ignoreFile = ignoreFile or file.endswith('.ap8')
    ignoreFile = ignoreFile or file.endswith('.backup')
    ignoreFile = ignoreFile or file.endswith('.new')
    ignoreFile = ignoreFile or file.endswith('.old')

    logging.debug(f"'{file}': returning {ignoreFile}")

    return ignoreFile


def _ignoreDir(directory):

    ignoreDir = False
    ignoreDir = ignoreDir or directory.endswith('__pycache__')

    logging.debug(f"'{directory}': returning {ignoreDir}")

    return ignoreDir


def _isPythonFile(file):
    return CmdShell().run(f"file --mime --brief '{file}'").out.startswith('text/x-python')


def _checkFileOrDir(ctx, fileDir, recLevel):

    if os.path.isfile(fileDir):
        logging.debug(f"'{fileDir}': is file")
        _checkFile(ctx, fileDir)

    elif os.path.isdir(fileDir):
        logging.debug(f"'{fileDir}': is directory")
        _checkDir(ctx, fileDir, recLevel)

    else:
        logging.debug(f"'{fileDir}': ignoring")
        ctx.formatter.printMsg(f"'{fileDir}' is neither a file nor a directory - ignoring")


def _checkDir(ctx, directory, recLevel):

    if _ignoreDir(directory):
        ctx.formatter.printMsg(f"Ignoring directory '{directory}'")
        return

    maxRecLevel = ctx.ar.recursion_level

    if recLevel <= maxRecLevel or maxRecLevel == -1:
        ctx.formatter.printMsg(f"Checking directory '{directory}'")
        for file in os.listdir(directory):
            _checkFileOrDir(ctx, f'{directory}/{file}', recLevel+1)

    else:
        ctx.formatter.printMsg(f"Not descending into directory '{directory}'")


def _checkFile(ctx, file):

    if any(file == f.path for f in ctx.files):
        ctx.formatter.printMsg(f"Ignoring file '{file}' (already visited)")
        return

    checkedFile = types.SimpleNamespace()
    checkedFile.path = file
    checkedFile.ignored = True

    ctx.files.append(checkedFile)

    if _ignoreFile(file) or not _isPythonFile(file):
        ctx.formatter.printMsg(f"Ignoring file '{file}'")
        return

    checkedFile.ignored = False

    ctx.formatter.printMsg(f"Checking file '{file}'")

    autopep8 = _Autopep8(ctx, file)

    checkedFile.ap8Run = autopep8.run()
    checkedFile.ap8Diff = autopep8.diff()
    checkedFile.pylint = _Pylint.run(file)

    autopep8.remove()


# ----------------------------------------------------------------------

def _main():

    ctx = getContext(_getArgs(), withCreds=False, withConfig=False)

    ctx.files     = []
    ctx.formatter = _getFormatter(ctx)

    ctx.formatter.printMsg('')

    for source in ctx.ar.source:
        _checkFileOrDir(ctx, source, 0)

    total   = 0
    totalOk = 0

    for file in ctx.files:

        if file.ignored or (file.ap8Diff.rc == 0 and file.pylint.rc == 0):
            if not file.ignored:
                total   += 1
                totalOk += 1
            continue

        # When we are here issues were found in file

        total += 1

        ctx.formatter.addFileHeader(file.path)

        if file.ap8Diff.rc != 0:
            ctx.formatter.addIssues('autopep8', file.ap8Diff.out)

        if file.pylint.rc != 0:
            ctx.formatter.addIssues('pylint', file.pylint.out)

        ctx.formatter.addFileFooter()

    ctx.formatter.addStats(total, totalOk)

    print(ctx.formatter)

    if totalOk != total:
        sys.exit(1)


# ----------------------------------------------------------------------

if __name__ == '__main__':
    try:
        _main()
    except KeyboardInterrupt:
        print()
    sys.exit(0)
