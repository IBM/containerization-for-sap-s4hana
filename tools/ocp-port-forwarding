#!/usr/bin/env python3

# ------------------------------------------------------------------------
# Copyright 2020, 2021 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

""" SSH port forwarding for creating a SAP GUI connection to the containerized SAP system """


# Global modules

import logging
import os
import socket
import sys


# Local modules

from modules.args    import getCommonArgs
from modules.command import CmdShell
from modules.context import getContext
from modules.fail    import fail
from modules.ocp     import (
    getWorkerIp,
    ocLogin
)
from modules.tools   import strBold


# Functions

def _getNodePortList(ctx):
    """ Get the node ports on the worker node which can be used to connect to the SAP system """
    return CmdShell().run(
        f'oc get service soos-{ctx.cf.refsys.nws4.sidL}-np'
        + ' -o template --template "{{range .spec.ports}}{{.name}}:{{.nodePort}},{{end}}"'
    ).out


def _portInUse(port):
    """ Check whether local port is in use """
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sck:
        inUse = sck.connect_ex(('localhost', port)) == 0
        logging.debug(f'   >>> Port {port} is in use: {inUse} <<<')
        return inUse


def _searchFreeInstno(instno, portList, reservedList):
    """ Find a free effective Instance Number by checking for free ports """
    # Argument portList is a list containing the required ports,
    # where xx is an replacement for the SAP instance number
    # Argument reservedList is an additional check for ports that shall be reserved

    freeInstNo = -1
    freePorts  = []
    instnoMin = int(instno)
    instnoMax = int(instno) + 100
    for i in range(instnoMin, instnoMax):
        for portStr in portList:
            port = int(portStr.replace('xx', f'{i % 100:02d}'))
            if port not in reservedList and not _portInUse(port):
                freePorts.append(port)
            else:
                freePorts = []
                break

        if freePorts:
            freeInstNo = i
            break

    if freePorts:
        logging.debug(f'>>> InstNo {freeInstNo:02d} is free: Port List {freePorts} <<<')
    else:
        logging.debug('>>> There is no free instNo in the range available ! <<<')

    return freeInstNo, freePorts


def _addSshForwardArgs(portList, nodePortList, workerIp):
    """ Compile argument list for SSH command """
    forwardArgs = []
    host = socket.gethostname()
    for i, port in enumerate(portList):
        logging.debug(f'>>> prepare forwarding from {host}.{port} '
                      f'to {workerIp}:{nodePortList[i]} <<<')
        forwardArgs.extend(['-L', f'{port}:{workerIp}:{nodePortList[i]}'])
    return forwardArgs


# ----------------------------------------------------------------------

def _main():

    # pylint: disable=too-many-locals

    ctx = getContext(getCommonArgs(
        'SSH port forwarding for creating a SAP GUI connection to the containerized SAP system'
    ))

    ocLogin(ctx, ctx.cr.ocp.user)

    workerIp   = getWorkerIp(ctx)
    helperUser = ctx.cr.ocp.helper.user.name
    helperIp   = ctx.cf.ocp.helper.host.ip
    diInstno   = ctx.cf.refsys.nws4.di.instno
    hdbInstno  = ctx.cf.refsys.hdb.instno

    logging.debug(f'   >>> Got Instno: diInstno {ctx.cf.refsys.nws4.di.instno} '
                  f'hdbInstno {ctx.cf.refsys.hdb.instno} <<<')
    sep1 = '-'*40
    sep2 = '.'*63

    sshCommand = ['ssh', '-N', '-g']

    diPort = []
    diNodePort = []
    hdbPort = []
    hdbNodePort = []

    logging.debug('>>> Analyze NodePortList: <<<')
    for i in _getNodePortList(ctx).split(','):
        # Fetch Name and NodePort fields from "oc get service" output
        #
        # Name needs to be of form <instance>-<port pattern> with instance di or hdb,
        # in the port pattern xx will be replaced with an "effective" SAP Instno
        #
        # in _getNodePortList Name and NodePort pairs are separated by :
        # and multiple Name:NodePort tuples are separated by ,
        logging.debug(f'   >>> Got element: {i} <<<')
        elem = i.split(':')

        if i.startswith("di"):
            diPort.append(elem[0].split('-')[1])
            diNodePort.append(elem[1])
        elif i.startswith("hdb"):
            hdbPort.append(elem[0].split('-')[1])
            hdbNodePort.append(elem[1])

    if diPort:
        diInstno, diPort = _searchFreeInstno(diInstno, diPort, [])
        if diInstno != -1:
            sshCommand.extend(_addSshForwardArgs(diPort, diNodePort, workerIp))

            print(f'\nEstablishing port forwarding to SAP system'
                  f" '{ctx.cf.refsys.nws4.sidU}' in cluster '{ctx.cf.ocp.domain}'\n\n"
                  f'Use the following parameters to create a SAP GUI connection:\n\n'
                  f'{sep1}\n'
                  f'   System ID           {ctx.cf.refsys.nws4.sidU}\n'
                  f'   Instance Number     {diInstno:02d}\n'
                  f'   Application Server  {socket.gethostname()}\n'
                  f'{sep1}')
        else:
            fail('Cannot find free local ports for the SAP DI to bind to')

    if hdbPort:
        hdbInstno, hdbPort = _searchFreeInstno(hdbInstno, hdbPort, diPort)
        if hdbInstno != -1:
            sshCommand.extend(_addSshForwardArgs(hdbPort, hdbNodePort, workerIp))

            mapHdbHost = 'map_' + ctx.cf.refsys.hdb.host.name

            print(f'\nUse the following parameters to create a HANA Studio connection:\n\n'
                  f'{sep1}\n'
                  f'   Host Name           {socket.gethostname()}\n'
                  f'   Instance Number     {hdbInstno:02d}\n'
                  f'   System ID           {ctx.cf.refsys.hdb.sidU}\n'
                  f'{sep1}\n'
                  f'{sep2}\nTo connect to the {strBold("tenant DB")}'
                  f' with {strBold("SAP HANA Studio")} it is required\n'
                  f'to set a new entry in the SAP HANA DB parameter {strBold("global.ini")} file\n'
                  f'In section {strBold("public_hostname_resolution")}:\n'
                  f'    - Ensure Key: {strBold("use_default_route")}'
                  f' has  value {strBold("ip")} (default)\n'
                  f'    - Add    Key: {strBold(mapHdbHost)}'
                  f'{" ":{len("use_default_route")-len(mapHdbHost)}s}'
                  f' with value {strBold(helperIp)}\n'
                  f'Use scope {strBold("System")} for the parameter change\n{sep2}')
        else:
            fail('Cannot find free local ports for the SAP HANA DB to bind to')

    if diPort or hdbPort:
        sshCommand.extend([f'{helperUser}@{helperIp}'])
        logging.debug(f'>>> execute {sshCommand[0]} with args {sshCommand} <<<')
        os.execlp(sshCommand[0], *sshCommand)
    else:
        fail('Could not identify any port to be forwarded')


# ----------------------------------------------------------------------

if __name__ == '__main__':
    try:
        _main()
    except KeyboardInterrupt:
        print()
    sys.exit(0)
