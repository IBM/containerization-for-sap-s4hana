#!/usr/bin/env python3

# ------------------------------------------------------------------------
# Copyright 2020, 2022 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

""" Copy an SAP HANA DB snapshot to the NFS server """


try:
    # Global modules

    import logging
    from pathlib          import Path

    # Local modules

    from modules.args     import getCommonArgs
    from modules.command  import (
        CmdSsh,
        CmdShell
    )
    from modules.context  import getContext
    from modules.fail     import fail
    from modules.nfstools import (
        getHdbCopyBase,
        getHdbSubDirs
    )
    from modules.startup  import startup
    from modules.tools    import getNumRunningSapProcs

except ModuleNotFoundError as mnfex:
    from modules.exceptions import setExceptHook
    setExceptHook()
    raise mnfex


# Functions

def _getCopyCmd(cmdSshDb, cmdSshNfs, sourceDir, targetDir):
    # Copy using tar shell command running on SAPDBHOST,
    # redirecting the output to <stdout>
    # and piping it then to the tar command running on the
    # NFS server.

    # ssh command Build Server -> SAPDBHOST
    sshDb  = cmdSshDb.getSshCmdAndSecrets()[0]
    # ssh command Build Server -> NFS Server
    sshNfs = cmdSshNfs.getSshCmdAndSecrets()[0]

    tarCmd = f"tar cf - {sourceDir}"

    # --strip-components=<value> is an argument used during extracting the tar file
    # Its value is set to the number of existing subdirs of the source to
    # strip the number of leading components from the extracted file name
    noOfSubdirs = _getNoOfSubdirs(sourceDir)

    untarCmd = f"tar xf - -C {targetDir} --strip-components={noOfSubdirs} --same-owner"
    return f"{sshDb} {tarCmd} | {sshNfs} {untarCmd}"


def _getNoOfSubdirs(directory):
    parentDir = Path(directory)
    count = 0
    rootDir = parentDir.anchor
    while str(parentDir) != str(rootDir):
        parentDir = parentDir.parent
        count = count+1
    return count


def _getFileSizeSet(cmdSsh, directory):
    cmd = f'cd {directory}; find . -type f -printf "%s %p$"'
    result = cmdSsh.run(cmd)
    if result.rc != 0:
        fail("Error: could not get file list")

    sizeList = result.out.split("$")
    sizeSet = set()
    for element in sizeList:
        sizeSet.add(tuple(element.split(" ")))
    return sizeSet


def _checkCopyStep(cmdSshDb, cmdSshNfs, sourceDir, targetDir):
    sourceSizes = _getFileSizeSet(cmdSshDb, sourceDir)
    targetSizes = _getFileSizeSet(cmdSshNfs, targetDir)

    # get differences:
    diffs = sourceSizes - targetSizes

    # if the set of diffs is not empty, there is a mismatch between source and target
    if len(diffs) > 0:
        for obj in diffs:
            # obj looks like: [<size>, <filename>]
            print(f"Missing file or file with wrong size: {obj[1]} on {targetDir}")
        return False
    return True

# ----------------------------------------------------------------------


def _main():

    ctx = getContext(getCommonArgs(
        'Copy an SAP HANA DB snapshot the NFS server'
    ))

    hdbSid  = ctx.cf.refsys.hdb.sidU
    hdbHost = ctx.cf.refsys.hdb.host
    hdbUser = ctx.cr.refsys.hdb.sidadm

    nfsHost   = ctx.cf.nfs.host
    nfsUser   = ctx.cr.nfs.user
    cmdSshNfs = CmdSsh(ctx, nfsHost.name, nfsUser)
    cmdSshDb  = CmdSsh(ctx, hdbHost.name, hdbUser)

    logging.debug('Checking if HDB is stopped')

    # Check if HDB is stopped

    if getNumRunningSapProcs(ctx, 'hdb') != '0':
        fail(f"Error: HANA Database '{hdbSid}' is running on host {hdbHost.name}.\n"
             f"Stop the database then restart the nfs-hdb-copy step.")

    # Copy HDB content

    for obj in getHdbSubDirs(ctx):

        subDir = obj.path
        base   = obj.base
        sourceDir = f"{base}/{subDir}/{hdbSid}"
        targetDir = f"{getHdbCopyBase(ctx)}/{subDir}/{hdbSid}"

        cmdSshNfs.run(f'mkdir -p "{targetDir}"')

        copyCmd = _getCopyCmd(cmdSshDb, cmdSshNfs, sourceDir, targetDir)

        print(f"Copying '{sourceDir}' to '{targetDir}' on host '{ctx.cf.nfs.host.name}'")
        CmdShell().run(copyCmd)

        if not _checkCopyStep(cmdSshDb, cmdSshNfs, sourceDir, targetDir):
            print(f"Copying '{sourceDir}' to '{targetDir}' was not successful.")


# ----------------------------------------------------------------------

if __name__ == '__main__':
    startup(_main)
