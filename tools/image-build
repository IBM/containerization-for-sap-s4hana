#!/usr/bin/env python3

# ------------------------------------------------------------------------
# Copyright 2020 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

""" Build a container image of a given flavor """

# Global modules

import sys

# Local modules

from modules.args         import (
    getCommonArgsParser,
    addArgFlavor
)
from modules.config       import getConfig
from modules.command      import CmdShell
from modules.imageBuilder import BuilderFactory
from modules.logger       import setupLogging
from modules.tools        import pushd

# Functions


def _getArgs():
    """ Get command line arguments """
    parser = getCommonArgsParser(
        'Build a container image of a given flavor'
    )

    addArgFlavor(parser)

    # pylint: disable=bad-whitespace

    parser.add_argument(
        '-t',
        '--temp-root',
        metavar  = '<temp-root>',
        required = False,
        default  = '/data/tmp',
        help     = f"Use <temp-root> as root for temporary files generated during build")
    parser.add_argument(
        '-d',
        '--build-directory',
        metavar  = '<build-dir>',
        required = False,
        help     = f"Use <build-dir> as build directory; "
                   f"if not specified, a new build directory is created under '<temp-root>'")
    parser.add_argument(
        '-k',
        '--keep-files',
        required = False,
        action   = 'store_true',
        help     = "Keep existing files in <build-dir> which were copied from <host> in a "
                   "previous run; has no effect if '-d' is not specified"
    )
    return parser.parse_args()

# ----------------------------------------------------------------------


def _main():

    args = _getArgs()

    setupLogging(args, args.flavor)

    config = getConfig(args.config_file, True)

    if args.flavor == 'init':
        with pushd(f'{config.repo.root}/flavors/init'):
            imageName = config.flavor.init.imageNames.local
            CmdShell().run(f'podman build -t {imageName} -f ./containerfile ./image-content')
    else:
        # pylint: disable=bad-whitespace
        sid  = getattr(config.flavor, args.flavor).sid
        host = getattr(config.flavor, args.flavor).host
        user = getattr(config.flavor, args.flavor).user

        factory = BuilderFactory().getBuilder(args.flavor)
        factory.buildImage(sid, host, user, config.repo.root,
                           args.temp_root, args.build_directory, args.keep_files)

# ----------------------------------------------------------------------


if __name__ == '__main__':
    _main()
    sys.exit(0)
