#!/usr/bin/env python3

# ------------------------------------------------------------------------
# Copyright 2020, 2022 IBM Corp. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

""" Verify parameter settings in configuration YAML file """


try:
    # Global modules

    # None

    # Local modules

    from modules.args    import getCommonArgsParser
    from modules.context import getContext
    from modules.fail    import fail
    from modules.startup import startup
    from modules.verify  import Verify

except ModuleNotFoundError as mnfex:
    from modules.exceptions import setExceptHook
    setExceptHook()
    raise mnfex


# Functions

def _getArgs():
    """ Get command line arguments """
    parser = getCommonArgsParser(
        'Verify parameter settings in configuration YAML file'
    )
    parser.add_argument(
        '-func',
        '--function',
        required = False,
        help = 'single test mode for function'
    )
    return parser.parse_args()


# ----------------------------------------------------------------------

def _main():

    ctx = getContext(_getArgs(), failOnDiscoveryError=True)
    print('-'*72)
    print(f"Verifying configuration parameters in file '{ctx.ar.config_file}'")
    print('-'*72)

    if not Verify(ctx).verify():
        print('-'*72)
        fail('VERIFICATION ERRORS OCCURED - SEE ABOVE MESSAGES FOR MORE DETAILS\n')

    print('-'*72)
    print('Verification successful.\n')


# ----------------------------------------------------------------------

if __name__ == '__main__':
    startup(_main)
